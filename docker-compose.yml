version: '3.8'

services:
  db:
    image: postgres:alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: /bin/sh -c "redis-server --requirepass $REDIS_PASSWORD"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  pdadmin:
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PDADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PDADMIN_DEFAULT_PASSWORD}
    ports:
      - "80:80"
    depends_on:
      - db

  rabbitmq:
    image: "rabbitmq:3-management"
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - ./cmd:/app/cmd
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      pdadmin:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  test_web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    env_file:
      - .env
    volumes:
      - .:/app
    command: sh -c "cd /app && go test ./..."

  go_sql:
    build:
      context: .
      dockerfile: docker/Dockerfile-go-sql
    env_file:
      - .env
    ports:
      - "8082:8082"
    volumes:
      - .:/app
    command: sh -c "cd /app/cmd/sql && go run main.go"
    depends_on:
      db:
        condition: service_healthy
      pdadmin:
        condition: service_started

#  qodana:
#    image: jetbrains/qodana:latest
#    volumes:
#      - ./:/data/project
#      - ./qodana-results:/data/results
#    command: --show-report

volumes:
  postgres-db:
  redis_data: